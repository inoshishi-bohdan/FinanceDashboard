@page "/statistics"

@using FinanceDashboard.Client.Authentication;
@using System.Net.Http.Headers;
@using System.Globalization;
@using FinanceDashboard.Server.Model;
@using FinanceDashboard.Shared.DTO;
@using FinanceDashboard.Shared.DTO.Expense;
@using FinanceDashboard.Shared.DTO.Income;
@using FinanceDashboard.Shared.Enums;
@using FinanceDashboard.Shared.Models;
@using Newtonsoft.Json;

@attribute [Authorize(Roles = "Customer")]

@inject HttpClient Http
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject Radzen.NotificationService NotificationService



<h1>Statistics</h1>

<div Class="rz-p-0 rz-p-md-8 statistic">

    <div class="chart">
        <h2>Incomes</h2>

        <RadzenCard Variant="Variant.Flat" class="mt-4 w-100 mb-4 d-flex align-items-center">
            <RadzenLabel Text="Currency" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown Change="@(async args => UpdateIncomesChartData())" Data="@_currencies" TextProperty="Name" ValueProperty="Id" @bind-Value="@_incomesSelectedCurencyId" />

            <RadzenLabel class="rz-ml-4" Text="Year" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown Change="@(async args => UpdateIncomesChartData())" Data="@_incomesYears" @bind-Value="@_incomesSelectedYear" />
        </RadzenCard>

        <RadzenChart>
            <RadzenColumnSeries Fill="#95A4A8" Title="@_incomesChartName" Data="@_incomesChartData" CategoryProperty="Month" LineType="LineType.Dashed" ValueProperty="Amount">
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
            </RadzenColumnSeries>
            <RadzenColumnOptions Radius="5" />
            <RadzenValueAxis Min="0" Max="@_incomeMax" Step="@_incomeStep">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="@_incomesAxisTitle" />
            </RadzenValueAxis>
            <RadzenLegend Visible="false" />
        </RadzenChart>
    </div>

    <div class="chart">
        <h2>Expenses</h2>

        <RadzenCard Variant="Variant.Flat" class="mt-4 w-100 mb-4 d-flex align-items-center">
            <RadzenLabel Text="Currency" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown Change="@(async args => UpdateExpensesChartData())" Data="@_currencies" TextProperty="Name" ValueProperty="Id" @bind-Value="@_expensesSelectedCurencyId" />

            <RadzenLabel class="rz-ml-4" Text="Year" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown Change="@(async args => UpdateExpensesChartData())" Data="@_expensesYears" @bind-Value="@_expensesSelectedYear" />
        </RadzenCard>

        <RadzenChart>
            <RadzenColumnSeries Fill="#45494F" Title="@_expensesChartName" Data="@_expensesChartData" CategoryProperty="Month" LineType="LineType.Dashed" ValueProperty="Amount">
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
            </RadzenColumnSeries>
            <RadzenColumnOptions Radius="5" />
            <RadzenValueAxis Min="0" Max="@_expenseMax" Step="@_expenseStep">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="@_expensesAxisTitle" />
            </RadzenValueAxis>
            <RadzenLegend Visible="false" />
        </RadzenChart>
    </div>

    <div class="chart">
        <h2>NetWorth</h2>

        <RadzenCard Variant="Variant.Flat" class="mt-4 w-100 mb-4 d-flex align-items-center" Style="gap: 0.5rem">
            <RadzenLabel Text="Currency" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown Change="@(async args => UpdateNetWorthChartData())" Data="@_currencies" TextProperty="Name" ValueProperty="Id" @bind-Value="@_netWorthSelectedCurencyId" />

            <RadzenLabel class="rz-ml-4" Text="Year" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown Change="@(async args => UpdateNetWorthChartData())" Data="@_incomesYears" @bind-Value="@_netWorthSelectedYear" />
        </RadzenCard>

        <RadzenCheckBox @bind-Value="@trend" Name="trend"></RadzenCheckBox>
        <RadzenLabel Text="Trend" Component="trend" Style="margin-right: 1rem;" class="rz-color-danger-dark" />
        <RadzenCheckBox @bind-Value="@median" Name="median"></RadzenCheckBox>
        <RadzenLabel Text="Median" Component="median" Style="margin-right: 1rem;" class="rz-color-success-dark" />
        <RadzenCheckBox @bind-Value="@mean" Name="mean"></RadzenCheckBox>
        <RadzenLabel Text="Mean" Component="mean" Style="margin-right: 1rem;" class="rz-color-info-dark" />
        <RadzenCheckBox @bind-Value="@mode" Name="mode"></RadzenCheckBox>
        <RadzenLabel Text="Mode" Component="mode" class="rz-color-warning-darker" />

        <RadzenChart>
            <RadzenLineSeries Smooth="@smooth" Data="@_netWorthChartData" CategoryProperty="Month" Title="@_netWorthChartName" ValueProperty="Amount">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
                <RadzenSeriesTrendLine Visible="@trend" Stroke="var(--rz-danger-dark)" LineType="LineType.Dashed" />
                <RadzenSeriesMedianLine Visible="@median" Stroke="var(--rz-success-dark)" LineType="LineType.Dotted" />
                <RadzenSeriesMeanLine Visible="@mean" Stroke="var(--rz-info-dark)" LineType="LineType.Dotted" />
                <RadzenSeriesModeLine Visible="@mode" Stroke="var(--rz-warning-darker)" LineType="LineType.Dotted" />
            </RadzenLineSeries>

            <RadzenValueAxis Min="@_netWorthMin" Max="_netWorthMax" Step="@_netWorthStep">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="@_netWorthAxisTitle" />
            </RadzenValueAxis>
            <RadzenLegend Visible="false" />
        </RadzenChart>

    </div>
</div>

@code {
    private class YearData
    {
        public List<ChartData> EURData { get; set; } = null!;
        public List<ChartData> USDData { get; set; } = null!;

    }

    private bool smooth = true;
    private bool showDataLabels = false;
    private bool trend = false;
    private bool median = false;
    private bool mean = false;
    private bool mode = false;

    private string? _expensesChartName;
    private string? _expensesAxisTitle;
    private int _expensesSelectedCurencyId = (int)Currencies.EUR;
    private string? _expensesSelectedCurrencyName;
    private int _expensesSelectedYear;
    private List<ChartData>? _expensesChartData;
    private List<int>? _expensesYears;
    private int _expenseMax = 100;
    private int _expenseStep = 100;
    private Dictionary<int, YearData> _expenseChartDataCollection = new Dictionary<int, YearData>();

    private string? _incomesChartName;
    private string? _incomesAxisTitle;
    private int _incomesSelectedCurencyId = (int)Currencies.EUR;
    private string? _incomesSelectedCurrencyName;
    private int _incomesSelectedYear;
    private List<ChartData>? _incomesChartData;
    private List<int>? _incomesYears;
    private int _incomeMax = 100;
    private int _incomeStep = 100;
    private Dictionary<int, YearData> _incomeChartDataCollection = new Dictionary<int, YearData>();

    private string? _netWorthChartName;
    private string? _netWorthAxisTitle;
    private int _netWorthSelectedCurencyId = (int)Currencies.EUR;
    private string? _netWorthSelectedCurrencyName;
    private int _netWorthSelectedYear;
    private List<ChartData>? _netWorthChartData;
    private int _netWorthMin = 0;
    private int _netWorthMax = 100;
    private int _netWorthStep = 100;
    private Dictionary<int, YearData> _netWorthChartDataCollection = new Dictionary<int, YearData>();

    private string? userLogin;
    private List<Currency>? _currencies;



    private void UpdateIncomesChartData()
    {
        if ((Currencies)_incomesSelectedCurencyId == Currencies.EUR)
        {
            _incomesChartData = _incomeChartDataCollection[_incomesSelectedYear].EURData;
        }
        else
        {
            _incomesChartData = _incomeChartDataCollection[_incomesSelectedYear].USDData;
        }

        _incomesChartName = $"{_incomesSelectedYear}";
        _incomesSelectedCurrencyName = _currencies!.First(currency => currency.Id == _incomesSelectedCurencyId).Name;
        _incomesAxisTitle = $"Income in {_incomesSelectedCurrencyName}";
        _incomeMax = GetChartMax(_incomesChartData);
        _incomeStep = GetChartStep(_incomeMax);
    }

    private void UpdateExpensesChartData()
    {
        if ((Currencies)_expensesSelectedCurencyId == Currencies.EUR)
        {
            _expensesChartData = _expenseChartDataCollection[_expensesSelectedYear].EURData;
        }
        else
        {
            _expensesChartData = _expenseChartDataCollection[_expensesSelectedYear].USDData;
        }

        _expensesChartName = $"{_expensesSelectedYear}";
        _expensesSelectedCurrencyName = _currencies!.First(currency => currency.Id == _expensesSelectedCurencyId).Name;
        _expensesAxisTitle = $"Expense in {_expensesSelectedCurrencyName}";
        _expenseMax = GetChartMax(_expensesChartData);
        _expenseStep = GetChartStep(_expenseMax);
    }

    private void UpdateNetWorthChartData()
    {
        if ((Currencies)_netWorthSelectedCurencyId == Currencies.EUR)
        {
            _netWorthChartData = _netWorthChartDataCollection[_netWorthSelectedYear].EURData;
        }
        else
        {
            _netWorthChartData = _netWorthChartDataCollection[_netWorthSelectedYear].USDData;
        }

        _netWorthChartName = $"{_netWorthSelectedYear}";
        _netWorthSelectedCurrencyName = _currencies!.First(currency => currency.Id == _netWorthSelectedCurencyId).Name;
        _netWorthAxisTitle = $"Net Worth in {_netWorthSelectedCurrencyName}";
        _netWorthMax = GetChartMax(_netWorthChartData);
        _netWorthMin = GetChartMin(_netWorthChartData);
        _netWorthStep = GetChartStep(_netWorthMax);
    }

    private async Task<List<int>> GetIncomesYearsAsync(string userLogin)
    {
        var response = await Http.PostAsJsonAsync<GetIncomesYearsRequest>("api/statistic/incomeYears", new GetIncomesYearsRequest { UserLogin = userLogin });
        var content =  await response.Content.ReadAsStringAsync();

        return JsonConvert.DeserializeObject<List<int>>(content)!;
    }

    private async Task<List<int>> GetExpensesYearsAsync(string userProfile)
    {
        var response = await Http.PostAsJsonAsync<GetExpensesYearsRequest>("api/statistic/expenseYears", new GetExpensesYearsRequest { UserLogin = userLogin });
        var content =  await response.Content.ReadAsStringAsync();

        return JsonConvert.DeserializeObject<List<int>>(content)!;
    }

    private async Task<List<ChartData>> GetFormattedIncomesAsync(int currencyId, string userLogin, int year)
    {
        string apiMethod = String.Empty;
        List<ChartData> chartData = new List<ChartData>();

        switch (currencyId)
        {
            case (int)Currencies.EUR:
                apiMethod = "incomeEUR";
                break;
            case (int)Currencies.USD:
                apiMethod = "incomeUSD";
                break;
            default:
                break;
        }

        var responseMessage = await Http.PostAsJsonAsync<FinanceDashboard.Shared.DTO.Income.GetStatisticRequest>($"api/statistic/{apiMethod}", new FinanceDashboard.Shared.DTO.Income.GetStatisticRequest { UserLogin = userLogin, Year = year});

        if (responseMessage.IsSuccessStatusCode)
        {
            var content = await responseMessage.Content.ReadAsStringAsync();
            chartData = JsonConvert.DeserializeObject<List<ChartData>>(content)!;
        }
        else
        {
            var errorMessage = await responseMessage.Content.ReadAsStringAsync();
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = errorMessage, Duration = 4000 });
        }

        return chartData;
    }

    private async Task<List<ChartData>> GetFormattedExpensesAsync(int currencyId, string userLogin, int year)
    {
        string apiMethod = String.Empty;
        List<ChartData> chartData = new List<ChartData>();

        switch (currencyId)
        {
            case (int)Currencies.EUR:
                apiMethod = "expenseEUR";
                break;
            case (int)Currencies.USD:
                apiMethod = "expenseUSD";
                break;
            default:
                break;
        }

        var responseMessage = await Http.PostAsJsonAsync<FinanceDashboard.Shared.DTO.Expense.GetStatisticRequest>($"api/statistic/{apiMethod}" ,new FinanceDashboard.Shared.DTO.Expense.GetStatisticRequest { UserLogin = userLogin, Year = year});

        if (responseMessage.IsSuccessStatusCode)
        {
            var content = await responseMessage.Content.ReadAsStringAsync();
            chartData = JsonConvert.DeserializeObject<List<ChartData>>(content)!;
        }
        else
        {
            var errorMessage = await responseMessage.Content.ReadAsStringAsync();
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = errorMessage, Duration = 4000 });
        }

        return chartData;
    }


    private async Task<List<ChartData>> GetFormattedNetWorthAsync(int currencyId, string userLogin, int year)
    {
        string apiMethod = String.Empty;
        List<ChartData> chartData = new List<ChartData>();

        switch (currencyId)
        {
            case (int)Currencies.EUR:
                apiMethod = "incomeEUR";
                break;
            case (int)Currencies.USD:
                apiMethod = "incomeUSD";
                break;
            default:
                break;
        }

        var responseMessage = await Http.PostAsJsonAsync<GetNetWorthStatisticRequest>($"api/statistic/{apiMethod}", new GetNetWorthStatisticRequest { UserLogin = userLogin, Year = year});

        if (responseMessage.IsSuccessStatusCode)
        {
            var content = await responseMessage.Content.ReadAsStringAsync();
            chartData = JsonConvert.DeserializeObject<List<ChartData>>(content)!;
        }
        else
        {
            var errorMessage = await responseMessage.Content.ReadAsStringAsync();
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = errorMessage, Duration = 4000 });
        }

        return chartData;
    }

    private int GetChartMax(List<ChartData> items)
    {
        decimal maxAmount = 0;
        int result = 0;

        foreach (var item in items)
        {
            if (item.Amount > maxAmount) maxAmount = item.Amount;
        }

        if (maxAmount != 0)
        {
            var wholePart = Math.Truncate(maxAmount);
            var stringForm = wholePart.ToString();
            var k = int.Parse(stringForm[0].ToString());
            var n = stringForm.Length - 1;

            result = (int)((k + 1) * (Math.Pow(10, n)));
        }

        return result;
    }

    private int GetChartMin(List<ChartData> items)
    {
        decimal minAmount = 0;
        int result = 0;

        foreach (var item in items)
        {
            if (item.Amount < minAmount) minAmount = item.Amount;
        }

        if (minAmount != 0)
        {
            var wholePart = Math.Truncate(minAmount);
            var stringForm = wholePart.ToString();
            var firstDigit = stringForm[0] == '-' ? stringForm[1].ToString() : stringForm[0].ToString();
            var k = int.Parse(firstDigit);
            var n = stringForm.Length - 1;

            result = (int)((k + 1) * (Math.Pow(10, n)));
        }

        return result;
    }

    private int GetChartStep(int max)
    {
        if (max == 0) return 100;

        return max / 5;
    }

    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
        userLogin = authState?.User.Identities?.First()?.Claims?.FirstOrDefault(item => item.Type.Contains("emailaddress"))?.Value;

        if (!string.IsNullOrWhiteSpace(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);

            _incomesYears = await GetIncomesYearsAsync(userLogin!);
            _expensesYears = await GetExpensesYearsAsync(userLogin!);

            _incomesSelectedYear = _incomesYears!.Count != 0 ? _incomesYears.Last() : default;
            _expensesSelectedYear = _expensesYears!.Count != 0 ? _expensesYears.Last() : default;
            _netWorthSelectedYear = _incomesSelectedYear;

            _currencies = await Http.GetFromJsonAsync<List<Currency>>("api/currency/list");

            List<ChartData> incEUR;
            List<ChartData> incUSD;
            foreach (var year in _incomesYears)
            {
                incEUR = await GetFormattedIncomesAsync((int)Currencies.EUR, userLogin!, year);
                incUSD = await GetFormattedIncomesAsync((int)Currencies.USD, userLogin!, year);

                _incomeChartDataCollection.Add(year, new YearData { EURData = incEUR, USDData = incUSD });
            }

            List<ChartData> expEUR;
            List<ChartData> expUSD;
            foreach (var year in _expensesYears)
            {
                expEUR = await GetFormattedExpensesAsync((int)Currencies.EUR, userLogin!, year);
                expUSD = await GetFormattedExpensesAsync((int)Currencies.USD, userLogin!, year);

                _expenseChartDataCollection.Add(year, new YearData { EURData = expEUR, USDData = expUSD });
            }

            List<ChartData> nwtEUR;
            List<ChartData> nwtUSD;
            foreach (var year in _incomesYears)
            {
                nwtEUR = await GetFormattedNetWorthAsync((int)Currencies.EUR, userLogin!, year);
                nwtUSD = await GetFormattedNetWorthAsync((int)Currencies.USD, userLogin!, year);

                _netWorthChartDataCollection.Add(year, new YearData { EURData = nwtEUR, USDData = nwtUSD });
            }

            _incomesChartData = _incomeChartDataCollection[_incomesSelectedYear].EURData;
            _expensesChartData = _expenseChartDataCollection[_expensesSelectedYear].EURData;
            _netWorthChartData = _netWorthChartDataCollection[_netWorthSelectedYear].EURData;

            _incomesChartName = $"{_incomesSelectedYear}";
            _expensesChartName = $"{_expensesSelectedYear}";
            _netWorthChartName = $"{_incomesSelectedYear}";

            _incomesAxisTitle = $"Incomes in EUR";
            _expensesAxisTitle = $"Expenses in EUR";
            _netWorthAxisTitle = $"Net Worth in EUR";

            _incomeMax = GetChartMax(_incomesChartData);
            _incomeStep = GetChartStep(_incomeMax);

            _expenseMax = GetChartMax(_expensesChartData);
            _expenseStep = GetChartStep(_expenseMax);

            _netWorthMax = GetChartMax(_netWorthChartData);
            _netWorthStep = GetChartStep(_netWorthMax);
            _netWorthMin = GetChartMin(_netWorthChartData);
        }
        else
        {
            navManager.NavigateTo("/login");
            return;
        }
    }
}
